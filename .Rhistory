Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
source('~/.active-rstudio-document', encoding = 'UTF-8')
kor <- 80
eng <- 56
mat <- 89
tot <- kor + eng + mat
print("세 과목 합계는")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
kor <- 80
eng <- 81.67
mat <- 90.0
total <- kor + eng + mat   # total = 251.67
avg <- total / 3   # avg = 83.89
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
kor <- 80
eng <- 81.67
mat <- 90.0
total <- kor + eng + mat   # total = 251.67
avg <- total / 3   # avg = 83.89
sgrade <- "A"     # 문자 "A"를 변수에 저장
mode(sgrade)
sname <- "홍길동"    # 문자열 "홍길동"을 변수에 저장
mode(sname)
cnum <- "1"    # 문자 1 저장
mode(cnum)
num <- 1    # 숫자 1 저장
mode(num)
cnum <- "1"    # 문자 1 저장
mode(cnum)
num <- 1    # 숫자 1 저장
mode(num)
kor <- 95    # kor에 95 저장
above90 <- kor >= 90   # kor 값이 90점 이상인가?
below90 <- kor < 90   # kor 값이 90보다 작은가?
print(above90)
print(below90)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
print(above70)
kor <- 80
eng <- 70
above 70 <- (kor >=70) & (eng >= 70)     # kor가 70점 이상이고, eng가 70점 이상인가?
kor <- 80
eng <- 70
above 70 <- (kor >= 70) & (eng >= 70)     # kor가 70점 이상이고, eng가 70점 이상인가?
kor <- 80
eng <- 70
above70 <- (kor >= 70) & (eng >= 70)     # kor가 70점 이상이고, eng가 70점 이상인가?
print(above70)
source('~/.active-rstudio-document', encoding = 'UTF-8')
round.length <- 40
round.height <- 50
water <- ((round.length / 2)^2 * 3.14) * round.height
numBottle <- water %% 500
print(numBottle)
diameter <- 40
height <- 50
sizeRound <- 3.14 * (diameter / 2)^2
volume <- sizeRound * height
numBottle <- volume %/% 500
print(numBottle)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Sys.setlocale(category = LC_CTYPE, locale = ko_KR.UTF-8)
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
str <- 801214
year <- substr(str, 1, 2)
month <- substr(str, 3, 4)
day <- substr(str, 5, 6)
date1 <- (year, "년", month, "월", day, "일")
date1 <- year, "년", month, "월", day, "일"
date1 <- extract(year, "년", month, "월", day, "일")
str <- 801214
year <- substr(str, 1, 2)
month <- substr(str, 3, 4)
day <- substr(str, 5, 6)
date1 <- paste(year, "년", month, "월", day, "일")
print(date1)
source('~/.active-rstudio-document', encoding = 'UTF-8')
birth <- as.numeric(801214)
birthLength <- nchar(801214)
seperate <- strsplit("801214", "1")
print(seperate)
change <- sub("8", "7", str)
change <- sub("1", "0", str)    # 첫 번째 언급 문자열을 다른 문자열로 대체하여 저장
change2 <- gsub("1", "0", str)    # 모든 해단 문자열을 다른 문자열로 대체하여 저장
phoneNum <- "01045678934"
num1 <- substr(phoneNum, 1, 3)
num2 <- substr(phoneNum, 4, 7)
num3 <- substr(phoneNum, 8, 11)
phoneRenum <- paste(num1, "-", num2, "-", num3)
print(phoneRenum)
s_date <- "2017-5-20"
date1 <- as.Date(s_date)
date2 <- date1 + 1000
print(date2)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/Desktop/R Project/R test/ch02_PRCT2.R', encoding = 'UTF-8')
source('~/.active-rstudio-document')
K <- 200
C <- (K-32)/1.8
Fahr <- C + 273
print(Fahr)
bnb <- 120000
wTax <- bnb * 1.1
wSer <- wTax * 1.15
print(wSer)
K <- 200
C <- (K-32)/1.8
Fahr <- C + 273
print(Fahr)
K <- 200
C <- K-273
Fahr <- C*1.8 + 32
print(Fahr)
prodCode <- TVLED48W
Cate <- substr(prodCode, 1, 5)
size <- substr(prodCode, 6, 7)
color <- substr(prodCode, 8)
bnb <- 120000
wTax <- bnb * 1.1
wSer <- wTax * 1.15
print(wSer)
K <- 200
C <- K-273
Fahr <- C*1.8 + 32
print(Fahr)
prodCode <- "TVLED48W"
Cate <- substr(prodCode, 1, 5)
size <- substr(prodCode, 6, 7)
color <- substr(prodCode, 8)
proInfo <- paste(Cate, "-", size, "-", color)
print(proInfo)
prodCode <- "TVLED48W"
Cate <- substr(prodCode, 1, 5)
size <- substr(prodCode, 6, 7)
color <- substr(prodCode, 8, 8)
proInfo <- paste(Cate, "-", size, "-", color)
print(proInfo)
prodCode <- "TVLED48W"
Cate <- substr(prodCode, 1, 5)
size <- substr(prodCode, 6, 7)
color <- substr(prodCode, 8, 8)
proInfo <- paste(Cate,"-",size,"-",color)
print(proInfo)
source('~/.active-rstudio-document')
path.package()
source('~/.active-rstudio-document')
path.package()
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
path.package()
detach("package:class", unload=TRUE)
path.package()
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:ggplot2", unload=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
install.packages("lubridate")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
#국어, 영어, 수학의 히스토그램
kor <- c(80, 90, 70, 65, 55, 30, 60, 90, 88, 100, 76, 30, 55, 61, 89, 68, 78, 70, 88, 82)
eng <- c(70, 95, 88, 75, 55, 42, 66, 89, 95, 98, 88, 35, 60, 68, 90, 70, 75, 80, 78, 88)
mat <- c(88, 90, 86, 80, 62, 50, 65, 84, 88, 92, 80, 45, 66, 77, 89, 80, 80, 85, 70, 90)
hist(kor, col = rainbow(10), xlab = "국어 점수", ylab = "학생 수")
hist(eng, col = gray(0), xlab = "영어 점수", ylab = "학생 수")
hist(kor, col = rainbow(10), xlab = "국어 점수", ylab = "학생 수")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
hist(kor, col = rainbow(10), xlab = "국어 점수", ylab = "학생 수")
rain <- c(100, 50, 150, 120, 80, 300, 600, 300, 200, 100, 70, 100)
yearRain <- sum(rain)
print(yearRain)
maxMonth <- which.max(yearRain)
cat(maxMonth, "월")
minMonth <- which.min(yearRain)
cat(minMonth, "월")
#1년 총 강우량, 가장 많이 온 달, 비가 가장 적게 온 달 출력
rain <- c(100, 50, 150, 120, 80, 300, 600, 300, 200, 100, 70, 100)
yearRain <- sum(rain)
print(yearRain)
maxMonth <- which.max(rain)
cat(maxMonth, "월")
minMonth <- which.min(rain)
cat(minMonth, "월")
#두 사람의 나이 차이
birth1 <- ymd("19950518")
birth2 <- ymd("19921214")
diffBirth <- interval(birth1, birth2)
diffAge <- as.period(diffBirth, unit="years")
print(diffAge)
source('~/.active-rstudio-document', encoding = 'UTF-8')
res1 <- seq(from = 1, to = 20, by = 2)     #초기값, 종료값, 증가분
cat("res1 : ", res1, "\n")
res2 <- seq(1,5,0.5)
cat("res2 : ", res2, "\n")
res3 <- seq(1, 10, length.out = 7)      #초기값, 종료값, 생성할 백터의 개수(생략불가)
cat("res3 : ", res3, "\n")
source('~/.active-rstudio-document', encoding = 'UTF-8')
#벡터 결합
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
scoreC <- cbind(kor, eng, mat)     # 열 단위로 결합해 행렬 생성
cat("cbind : \n"); print(scoreC)
scoreR <- rbind(kor, eng, mat)    # 행 단위로 결합해 행렬 생성
cat("rbind : \n"); prin(scoreR)
# 전부 cat으로 안 묶은 이유는 문자열 먼저 띄우고, 행렬을 제대로 표현하기 위해(함수 연결은 ;)
cat("rbind : \n"); print(scoreR)
cat("each student's total score : "); print(total)
#calculation
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
total <- kor + eng + mat
cat("each student's total score : "); print(total)
source('~/Desktop/R_Project/R_test/ch04/ch04_vector_individual access:calculation.R', encoding = 'UTF-8')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
kor <- score[ ,1]
kor <- score[,1, drop=FALSE]  # 4x1의 행렬로 표현 및 인식
kor <- score[,1, drop=TRUE]  # 4x1의 행렬로 표현 및 인식
kor <- score[,1, drop=FALSE]  # 4x1의 행렬로 표현 및 인식
substu <- score[c(2, 3), c(2, 3)]
print(substu)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
finSco <- matrix(c(85, 75, 95, 80, 80, 70, 95, 90, 90, 85, 90, 85), nrow = 4)
midSco[3, 2] <- 100
totalSco <- midSco + finSco
print(totalSco)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
finSco <- matrix(c(85, 75, 95, 80, 80, 70, 95, 90, 90, 85, 90, 85), nrow = 4)
midSco[3, 2] <- 100
totalSco <- midSco + finSco
print(totalSco)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
colnames(midSco) <- c("국어", "영어", "수학")
rownames(midSco) <- c("정우성", "김철수", "송중기", "김영희")
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
colnames(midSco) <- c("국어", "영어", "수학")
rownames(midSco) <- c("정우성", "김철수", "송중기", "김영희")
print(midSco)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch04/ch04_HW.R', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch04/ch04_HW.R', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch04/ch04_HW.R', encoding = 'UTF-8')
midSco <- matrix(c(80,60,90,70,70,50,100,80,95,70,95,80), 4,3,FALSE)
rownames(midSco, "정우성", "김철수", "송중기", "김영희")
colnames(midSco, "국어", "영어", "수학")
cat("중간고사 성적 : ", "\n"); print(midSco)
midSco <- matrix(c(80,60,90,70,70,50,100,80,95,70,95,80), 4,3,FALSE)
rownames(midSco) <- c("정우성", "김철수", "송중기", "김영희")
colnames(midSco) <- c("국어", "영어", "수학")
cat("중간고사 성적 : ", "\n"); print(midSco)
midSco <- matrix(c(80,60,90,70,70,50,100,80,95,70,95,80), 4,3,FALSE)
rownames(midSco) <- c("정우성", "김철수", "송중기", "김영희")
colnames(midSco) <- c("국어", "영어", "수학")
cat("중간고사 성적 : ", "\n"); print(midSco)
song <- midSco[3,]      #송중기의 중간고사 국어, 영어, 수학 점수는
cat("송중기 중간고사 점수 : ", song, "\n")
totStu <- rowsums(midSco)    #학생별 전 과목 총점
cat("학생별 전 과목 총점 : ", totStu, "\n")
avgSub <- colMeans(midSco)    #과목별 평균
cat("과목별 평균 : ", avgSub, "\n")
midSco <- matrix(c(80,60,90,70,70,50,100,80,95,70,95,80), 4,3,FALSE)
rownames(midSco) <- c("정우성", "김철수", "송중기", "김영희")
colnames(midSco) <- c("국어", "영어", "수학")
cat("중간고사 성적 : ", "\n"); print(midSco)
song <- midSco[3,]      #송중기의 중간고사 국어, 영어, 수학 점수는
cat("송중기 중간고사 점수 : ", song, "\n")
totStu <- rowSums(midSco)    #학생별 전 과목 총점
cat("학생별 전 과목 총점 : ", totStu, "\n")
avgSub <- colMeans(midSco)    #과목별 평균
cat("과목별 평균 : ", avgSub, "\n")
midSco <- matrix(c(80,60,90,70,70,50,100,80,95,70,95,80), 4,3,FALSE)
rownames(midSco) <- c("정우성", "김철수", "송중기", "김영희")
colnames(midSco) <- c("국어", "영어", "수학")
cat("중간고사 성적 : ", "\n"); print(midSco)
song <- midSco[3,]      #송중기의 중간고사 국어, 영어, 수학 점수는
cat("\n송중기 중간고사 점수 : \n"); print(song)
totStu <- rowSums(midSco)    #학생별 전 과목 총점
cat("\n학생별 전 과목 총점 : \n"); print(totStu)
avgSub <- colMeans(midSco)    #과목별 평균
cat("\n과목별 평균 : \n"); print(avgSub)
source('~/.active-rstudio-document', encoding = 'UTF-8')
student <- matrix(c(58,63,85,69,90,100,95,99,80,32,98,45,90,89,60), 5,3,FALSE)
rownames(student) <- c("1번", "2번", "3번", "4번", "5번")
colnames(student) <- c("국어", "영어", "수학")
sumStu <- rowSums(student)
avgStu <- sumStu/3
Student <- cbind(student, sumStu, avgStu)
print(Student)
print(apply(student, 1, sum))
print(apply(student, 1, mean))
Student <- cbind(student, "합계"=sumStu, "평균"=avgStu)
print(Student)
Student <- cbind(student, "합계"=sumStu, "평균"=avgStu)      #cbind, rbind 시에 이름을 바로 붙일 수 있음
print(Student, digit=3)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch05/ch05_Dataframe.R', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch05/ch05_Dataframe.R', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch05/ch05_Dataframe.R', encoding = 'UTF-8')
View(stuInfo)
#list 원소 추가/변경/삭제
stuOneData <- list(Number=1, Name="김철수", scoKor=60, scoEng=50, scoMat=70, grade="D")
stuOneData$scoEng <- 60 #기존 리스트의 scoEng 항목의 값을 변경
stuOneData$scoSci <- 90 #기존 리스트에 scoSci 항목와 값을 추가
# 각 열(속성)별로 생성한 후 data.frame() 함수로 모든 열(속성)을 합쳐 데이터 프레임 완성
number<- seq(1:4)
name <- c("정우성", "김철수", "송중기", "김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B", "D", "A", "C")
stuInfo <- data.frame(number, name, kor, eng, mat, grade, stringsAsFactors = FALSE)
#데이터 프레임의 변경/추출
stuInfo$kor[3] <- 85     #stuInfo 데이터 프레임에서 kor 열의 3번째 원소를 변경
stuOne <- stuInfo[3,]    #stuInfo 데이터 프레임의 3번째 학생의 데이터를 stuOne에 데이터프레임으로 저장
View(stuOne)
View(stuInfo)
scoKor <- stuInfo$kor    #stuInfo 데이터 프레임의 kor 열을 추출하여 scoKor에 벡터로 저장
scores <- stuInfo[,c(3:5)]   #stuInfo의 3~5열 (국영수 성적)만 추출해 데이터프레임으로 저장
View(scores)
students <- stuInfo[c(2,3),]   #stuInfo의 2,3번 학생의 정보를 추출해 데이터프레임으로 저장
View(students)
# 각 열(속성)별로 생성한 후 data.frame() 함수로 모든 열(속성)을 합쳐 데이터 프레임 완성
number<- seq(1:4)
name <- c("정우성", "김철수", "송중기", "김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B", "D", "A", "C")
#데이터 프레임에서 추출된 데이터 유형
stuInfo <- data.frame(번호=number, 이름=name, 국어=kor, 영어=eng, 수학=mat, 등급=grade, stringsAsFactors = FALSE)
View(stuInfo)
res1 <- stuInfo$이름; print(res1)     # 윗 줄에서 설정한 태그값으로 열에 접근, 벡터로 반환
res3 <- stuInfo["이름"]; print(res3)    # 그냥 태그로 접근하면 벡터가 아닌 데이터프레임으로 반환
View(res3)
print(class(res1))
print(class(res3))
# 각 열(속성)별로 생성한 후 data.frame() 함수로 모든 열(속성)을 합쳐 데이터 프레임 완성
number<- seq(1:4)
name <- c("정우성", "김철수", "송중기", "김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B", "D", "A", "C")
stuInfo <- data.frame(number, name, kor, eng, mat, grade, stringsAsFactors = FALSE)
stuNew1 <- list(5, "홍길동", 85, 95, 80, 90, "A")
stuNew2 <- list(6, "강개토", 95, 80, 90, "A")     # 성적 개수 오류
stuInfo <- cbind(stuInfo[,c(1:5)], sci, stuInfo[,6])   # 과학점수 항목을 6열에 추가
#데이터 프레임 항목(열) 및 레코드(행) 추가/삭제
sci <- c(95, 85, 75, 80)
stuInfo <- cbind(stuInfo[,c(1:5)], sci, stuInfo[,6])   # 과학점수 항목을 6열에 추가
stuInfo <- cbind(stuInfo[,c(1:5)], sci, stuInfo[6])   # 과학점수 항목을 6열에 추가
number<- seq(1:4)
name <- c("정우성", "김철수", "송중기", "김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B", "D", "A", "C")
stuInfo <- data.frame(number, name, kor, eng, mat, grade, stringsAsFactors = FALSE)
#데이터 프레임 항목(열) 및 레코드(행) 추가/삭제
sci <- c(95, 85, 75, 80)
stuNew1 <- list(5, "홍길동", 85, 95, 80, 90, "A")
stuNew2 <- list(6, "강개토", 95, 80, 90, "A")     # 성적 개수 오류
stuInfo <- cbind(stuInfo[,c(1:5)], sci, stuInfo[6])   # 과학점수 항목을 6열에 추가
stuInfo <- rbind(stuInfo[c(1:2),], stuNew1, stuInfo[c(3:4),])   # 5번학생 레코드를 3행에 추가
stuInfo <- rbind(stuInfo, stuNew2)    # 6번학생 레코드를 마지막 행에 추가
stuInfo <- stuInfo[-5,]   #해당 행 또는 열을 삭제
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
View(midSco)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
sumStu <- apply(midSco[3:5], 1, sum)
print(sumStu)
totKor <- sum(midSco["국어"])
print(totKor)
totEng <- sum(midSco$영어)
print(totEng)
totMat <- sum(midSco[5])
print(totMat)
avgKor <- totKor/5
avgEng <- totEng/5
avgMat <- totMat/5
stuInfo <- cbind(midSco[,c(1:5)], sumStu, avgStu, midSco[6])
cat("\n1반 학생 중간 성적 최종 : \n"); print(stuInfo)
#학생별 합계/평균
sumStu <- apply(midSco[3:5], 1, sum)
print(sumStu)
avgStu <- apply(midSco[3:5], 1, mean)
print(avgStu)
#데이터프레임 합치기
stuInfo <- cbind(midSco[,c(1:5)], sumStu, avgStu, midSco[6])
cat("\n1반 학생 중간 성적 최종 : \n"); print(stuInfo)
source('~/.active-rstudio-document', encoding = 'UTF-8')
stuInfo <- cbind(midSco[,c(1:5)], 합계=sumStu, 평균=avgStu, midSco[6])
cat("\n1반 학생 중간 성적 최종 : \n"); print(stuInfo, digit=3)
stuInfo <- cbind(midSco[,c(1:5)], 합계=sumStu, 평균=avgStu, midSco[6])
cat("\n1반 학생 중간 성적 최종 : \n"); print(stuInfo, digit=3)
stuInfo <- cbind(midSco[,c(1:5)], 합계=sumStu, 평균=avgStu, midSco[6])
cat("\n1반 학생 중간 성적 최종 : \n"); print(stuInfo, digit = 3)
#과목별 합계
totKor <- sum(midSco["국어"])
print(totKor)
totEng <- sum(midSco$영어)
print(totEng)
totMat <- sum(midSco[5])
print(totMat)
#과목별 평균
avgKor <- totKor/5
avgEng <- totEng/5
avgMat <- totMat/5
#p146
num <- c(1:5)
name <- c("송중기", "전지현", "송혜교", "김태희", "정우성")
kor <- c(58,63,85,69,90)
eng <- c(100,95,99,80,32)
mat <- c(98,45,90,89,60)
grade <- c("B", "D", "A", "C", "D")
midSco <- data.frame(학번=num, 이름=name, 국어=kor, 영어=eng, 수학=mat, 등급=grade, stringsAsFactors = FALSE)
print(midSco)
str(midSco)
totKor <- sum(midSco["국어"])
print(totKor)
totEng <- sum(midSco$영어)
print(totEng)
totMat <- sum(midSco[5])
print(totMat)
#과목별 평균
avgKor <- totKor/5
avgEng <- totEng/5
avgMat <- totMat/5
source('~/Desktop/R_Project/R_test/ch05/ch05_List&Dataframe_PRTC.R', encoding = 'UTF-8')
#평균이 70점 이상인
subScore <- Score[Score$avgStu >= 70]
cat("\n1반학생 중 평균이", 70, "점 이상인 학생은", "\n"); print(subScore)
View(Score)
subScore <- Score[Score$avgStu >= 70]
cat("\n1반 학생 중 평균이", 70, "점 이상인 학생은", "\n"); print(subScore)
subScore <- Score[Score[3] >= 70]
cat("\n1반 학생 중 평균이", 70, "점 이상인 학생은", "\n"); print(subScore)
subScore <- data.frame(Score[Score$avgStu >= 70])
cat("\n1반 학생 중 평균이", 70, "점 이상인 학생은", "\n"); print(subScore)
source('~/Desktop/R_Project/R_test/ch05/ch05_List&Dataframe_PRTC.R', encoding = 'UTF-8')
subScore <- Score[Score$avgStu >= 70,]
cat("\n1반 학생 중 평균이", 70, "점 이상인 학생은", "\n"); print(subScore)
source('~/Desktop/R_Project/R_test/ch05/ch05_List&Dataframe_PRTC.R', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch05/ch05_List&Dataframe_PRTC.R', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
avgAll <- apply(BusanTemp[4], 2, mean)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
avgAll <- mean(BusanTemp$평균기온)
minAll <- apply(BusanTemp["최저기온"], 2, min)
below20_2 <- subset(BusanTemp, subset = (평균기온 > 20), select = c(일시, 평균기온))
cat("\n평균기온이 20도 미만인 날은 : \n"); print(below20_2)
below20_2 <- subset(BusanTemp, subset = (평균기온 < 20), select = c(일시, 평균기온))
cat("\n평균기온이 20도 미만인 날은 : \n"); print(below20_2)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
View(data)
# 범주로 함수 적용
avgWei_F <- tapply(data$몸무게, data$성별, mean)
print(avgWei_F)
# 범주로 함수 적용
avgWei_FM <- tapply(data$몸무게, data$성별, mean)
source('~/Desktop/R_Project/R_test/ch05/ch05_PRTC2.R', encoding = 'UTF-8')
source('~/Desktop/R_Project/R_test/ch05/ch05_PRTC2.R', encoding = 'UTF-8')
